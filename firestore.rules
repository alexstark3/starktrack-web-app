rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ────────── 1. SINGLE SUPER-ADMIN ────────── */
    match /{document=**} {
      allow read, write: if request.auth != null &&
                         request.auth.uid == 'KxJqwhobV5T8RBZhXKaHYHlLxaA3';
    }

    /* ────────── 2. READ-ONLY APP CONFIG ────────── */
    match /appConfig/{document=**} {
      allow read : if true;
      allow write: if false;
    }

    /* ────────── 3. USER ⇄ COMPANY MAPPING ────────── */
    match /userCompany/{userId} {

      /* CREATE / UPDATE */
      allow write: if request.resource != null &&
                   request.resource.data.companyId != null &&
                   hasRoleInCompany(request.auth.uid,
                                    request.resource.data.companyId,
                                    ['admin','company_admin','super_admin']);

      /* DELETE */
      allow delete: if hasRoleInCompanySimple(request.auth.uid,
                                              resource.data.companyId,
                                              ['admin','company_admin','super_admin']);

      /* READ (self or privileged) */
      allow read: if request.auth != null &&
                  (request.auth.uid == userId ||
                   hasRoleInCompanySimple(request.auth.uid,
                                          resource.data.companyId,
                                          ['admin','company_admin','super_admin']));
    }

    /* ────────── 4. COMPANY DATA TREE ────────── */
    match /companies/{companyId} {

      /* Company root doc ------------- */
      allow read : if isUserInCompany(request.auth.uid, companyId);

      /* Added OR-clause so admin can write even
         if their own userCompany doc is momentarily absent */
      allow write: if hasRoleInCompany(request.auth.uid, companyId,
                                       ['admin','company_admin','super_admin']) ||
                   hasRoleInCompanySimple(request.auth.uid, companyId,
                                          ['admin','company_admin','super_admin']);

      /* Users sub-collection ---------- */
      match /users/{userId} {

        /* READ (self or privileged) */
        allow read: if request.auth != null &&
                    (request.auth.uid == userId ||
                     hasRoleInCompany(request.auth.uid, companyId,
                                      ['admin','company_admin','super_admin']));

        /* CREATE / UPDATE */
        allow create, update: if hasRoleInCompany(request.auth.uid, companyId,
                                                  ['admin','company_admin','super_admin']) &&
                              !request.resource.data.roles.hasAny(['super_admin']) &&
                              !isAssigningSuperAdminRole(request.auth.uid, companyId);

        /* DELETE — uses *Simple* so it works after mapping is gone */
        allow delete: if hasRoleInCompanySimple(request.auth.uid, companyId,
                                                ['admin','company_admin','super_admin']) &&
                      !resource.data.roles.hasAny(['super_admin']);
      }

      /* ----- Projects collection - only for users with time_tracker module ----- */
      match /projects/{docId} {
        allow read: if request.auth != null &&
                     hasModuleAccess(request.auth.uid, companyId, 'time_tracker');
      }

      /* ----- Other company sub-collections ----- */
      match /{subCol}/{docId} {
        allow read, write: if ['clients','groups',
                               'holiday_policies','timeoff_policies']
                               .hasAny([subCol]) &&
                           (
                             /* READ - All collections for authenticated users in company */
                             (request.method == 'get' && 
                              request.auth != null &&
                              companyCanRead()) ||

                             /* WRITE — uses the new helper that tries *Simple* first */
                             (request.method != 'get' && companyCanWriteSimple())
                           );
      }

      /* ----- Time-tracking logs ----- */
      match /users/{userId}/all_logs/{logId} {
        allow read : if request.auth != null &&
                     (request.auth.uid == userId ||
                      hasRoleInCompany(request.auth.uid, companyId,
                                       ['admin','company_admin','super_admin','team_leader']));
        allow write: if request.auth != null &&
                     (request.auth.uid == userId ||
                      hasRoleInCompany(request.auth.uid, companyId,
                                       ['admin','company_admin','super_admin']));
      }

      match /users/{userId}/sessions/{sessionId} {
        allow read, write: if request.auth != null &&
                           (request.auth.uid == userId ||
                            hasRoleInCompany(request.auth.uid, companyId,
                                             ['admin','company_admin','super_admin']));

        match /logs/{logId} {
          allow read : if request.auth != null &&
                       (request.auth.uid == userId ||
                        hasRoleInCompany(request.auth.uid, companyId,
                                         ['admin','company_admin','super_admin','team_leader']));
          allow write: if request.auth != null &&
                       (request.auth.uid == userId ||
                        hasRoleInCompany(request.auth.uid, companyId,
                                         ['admin','company_admin','super_admin']));
        }
      }

      /* Helper shortcuts scoped to company */
      function companyCanRead() {
        return isUserInCompany(request.auth.uid, companyId);
      }
      function companyCanWriteSimple() {
        /* Try Simple first, fall back to full check */
        return hasRoleInCompanySimple(request.auth.uid, companyId,
                                      ['admin','company_admin','super_admin']) ||
               hasRoleInCompany(request.auth.uid, companyId,
                                ['admin','company_admin','super_admin']);
      }
    } /* ← end /companies/{companyId} */

    /* ────────── 5. ADMIN PROFILES & MISC ────────── */
    match /admin_users/{adminId} {
      allow read, write: if request.auth != null && request.auth.uid == adminId;
    }

    match /login_attempts/{emailKey} {
      allow read, write: if true;   /* public for rate-limiting */
    }

    match /migrations/{migrationId} {
      allow read : if request.auth != null;
      allow write: if false;
    }

    /* ────────── 6. HELPER FUNCTIONS ────────── */
    function isUserInCompany(userId, companyId) {
      return exists(/databases/$(database)/documents/userCompany/$(userId)) &&
             get(/databases/$(database)/documents/userCompany/$(userId)).data.companyId == companyId;
    }

    function hasAnyRole(userRoles, requiredRoles) {
      return userRoles.hasAny(requiredRoles);
    }

    function hasRoleInCompany(userId, companyId, requiredRoles) {
      return isUserInCompany(userId, companyId) &&
             exists(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)) &&
             hasAnyRole(
               get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.roles,
               requiredRoles);
    }

    /* Simpler variant — no userCompany lookup */
    function hasRoleInCompanySimple(userId, companyId, requiredRoles) {
      return exists(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)) &&
             hasAnyRole(
               get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.roles,
               requiredRoles);
    }

    /* Check if user has specific module access */
    function hasModuleAccess(userId, companyId, moduleName) {
      return exists(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)) &&
             get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.modules.hasAny([moduleName]);
    }

    /* Prevent privilege escalation */
    function isAssigningSuperAdminRole(callerId, companyId) {
      return request.resource.data.roles.hasAny(['super_admin']) &&
             !hasRoleInCompany(callerId, companyId, ['super_admin']);
    }
  }
}
