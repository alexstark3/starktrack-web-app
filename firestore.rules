rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ===== ADMIN USERS =====
    // Admin users can only access their own admin document
    match /admin_users/{adminId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == adminId;
    }

    // ===== USER ACCESS LAYER =====
    // Users can only access their own access document
    match /userCompany/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }

    // ===== LOGIN ATTEMPTS (Rate Limiting) =====
    // Users can only access their own login attempts
    match /login_attempts/{emailKey} {
      allow read, write: if request.auth != null;
    }

    // ===== MIGRATION RECORDS =====
    // Only allow read access to migration records
    match /migrations/{migrationId} {
      allow read: if request.auth != null;
      allow write: if false; // No one can write migration records
    }

    // ===== COMPANY DATA =====
    // Users can only access their assigned company
    match /companies/{companyId} {
      allow read, write: if request.auth != null && 
        isUserInCompany(request.auth.uid, companyId);

      // ===== USERS IN COMPANY =====
      match /users/{userId} {
        allow read: if request.auth != null && 
          (request.auth.uid == userId || 
           hasRoleInCompany(request.auth.uid, companyId, ['admin', 'super_admin']));
        
        allow write: if request.auth != null && 
          hasRoleInCompany(request.auth.uid, companyId, ['admin', 'super_admin']);
      }

      // ===== TIME LOGS =====
      match /users/{userId}/all_logs/{logId} {
        allow read: if request.auth != null && 
          (request.auth.uid == userId || 
           hasRoleInCompany(request.auth.uid, companyId, ['admin', 'super_admin', 'team_leader']));
        
        allow write: if request.auth != null && 
          (request.auth.uid == userId || 
           hasRoleInCompany(request.auth.uid, companyId, ['admin', 'super_admin']));
      }

      // ===== SESSIONS (Legacy) =====
      match /users/{userId}/sessions/{sessionId} {
        allow read: if request.auth != null && 
          (request.auth.uid == userId || 
           hasRoleInCompany(request.auth.uid, companyId, ['admin', 'super_admin', 'team_leader']));
        
        allow write: if request.auth != null && 
          (request.auth.uid == userId || 
           hasRoleInCompany(request.auth.uid, companyId, ['admin', 'super_admin']));
        
        match /logs/{logId} {
          allow read: if request.auth != null && 
            (request.auth.uid == userId || 
             hasRoleInCompany(request.auth.uid, companyId, ['admin', 'super_admin', 'team_leader']));
          
          allow write: if request.auth != null && 
            (request.auth.uid == userId || 
             hasRoleInCompany(request.auth.uid, companyId, ['admin', 'super_admin']));
        }
      }

      // ===== PROJECTS =====
      match /projects/{projectId} {
        allow read: if request.auth != null && 
          isUserInCompany(request.auth.uid, companyId);
        
        allow write: if request.auth != null && 
          hasRoleInCompany(request.auth.uid, companyId, ['admin', 'super_admin']);
      }

      // ===== CLIENTS =====
      match /clients/{clientId} {
        allow read: if request.auth != null && 
          isUserInCompany(request.auth.uid, companyId);
        
        allow write: if request.auth != null && 
          hasRoleInCompany(request.auth.uid, companyId, ['admin', 'super_admin']);
      }
    }
  }

  // ===== HELPER FUNCTIONS =====

  // Check if user belongs to a specific company (NOW USES userCompany)
  function isUserInCompany(userId, companyId) {
    return exists(/databases/$(database)/documents/userCompany/$(userId)) &&
           get(/databases/$(database)/documents/userCompany/$(userId)).data.companyId == companyId;
  }

  // Check if user has specific role in company
  function hasRoleInCompany(userId, companyId, requiredRoles) {
    return isUserInCompany(userId, companyId) &&
           exists(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)) &&
           hasAnyRole(get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.roles, requiredRoles);
  }

  // Check if user has any of the required roles
  function hasAnyRole(userRoles, requiredRoles) {
    return userRoles.hasAny(requiredRoles);
  }

  // Check if user has specific module access
  function hasModuleAccess(userId, companyId, requiredModule) {
    return isUserInCompany(userId, companyId) &&
           exists(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)) &&
           get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.modules.hasAny([requiredModule]);
  }
} 