rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // App config (read-only)
    match /appConfig/{document=**} {
      allow read: if true;
      allow write: if false;
    }
    
    // User-company mapping - SIMPLE WORKING RULE
    match /userCompany/{userId} {
      allow read, write: if request.auth != null;
    }

    // Company data and subcollections
    match /companies/{companyId} {
      allow read: if isUserInCompany(request.auth.uid, companyId);
      allow write: if hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin']);

      // Users
      match /users/{userId} {
        allow read: if request.auth != null && (
          request.auth.uid == userId ||
          hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin'])
        );
        allow write: if hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin']) &&
                      !request.resource.data.roles.hasAny(['super_admin']) &&
                      !isAssigningSuperAdminRole(request.auth.uid, companyId);
      }

      // Clients
      match /clients/{clientId} {
        allow read: if isUserInCompany(request.auth.uid, companyId);
        allow write: if hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin']);
      }

      // Projects
      match /projects/{projectId} {
        allow read: if isUserInCompany(request.auth.uid, companyId);
        allow write: if hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin']);
      }

      // Groups
      match /groups/{groupId} {
        allow read: if isUserInCompany(request.auth.uid, companyId);
        allow write: if hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin']);
      }

      // Holiday Policies
      match /holiday_policies/{policyId} {
        allow read: if isUserInCompany(request.auth.uid, companyId);
        allow write: if hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin']);
      }

      // Time Off Policies
      match /timeoff_policies/{policyId} {
        allow read: if isUserInCompany(request.auth.uid, companyId);
        allow write: if hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin']);
      }

      // User logs and sessions (example, keep your existing logic)
      match /users/{userId}/all_logs/{logId} {
        allow read: if request.auth != null && (
          request.auth.uid == userId ||
          hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin', 'team_leader'])
        );
        allow write: if request.auth != null && (
          request.auth.uid == userId ||
          hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin'])
        );
      }

      match /users/{userId}/sessions/{sessionId} {
        allow read: if request.auth != null && (
          request.auth.uid == userId ||
          hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin', 'team_leader'])
        );
        allow write: if request.auth != null && (
          request.auth.uid == userId ||
          hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin'])
        );
        match /logs/{logId} {
          allow read: if request.auth != null && (
            request.auth.uid == userId ||
            hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin', 'team_leader'])
          );
          allow write: if request.auth != null && (
            request.auth.uid == userId ||
            hasRoleInCompany(request.auth.uid, companyId, ['admin', 'company_admin', 'super_admin'])
          );
        }
      }
    }

    // Admin users
    match /admin_users/{adminId} {
      allow read, write: if request.auth != null && request.auth.uid == adminId;
    }

    // Rate limiting (for login attempts)
    match /login_attempts/{emailKey} {
      allow read, write: if true;
    }

    // Migrations (read-only)
    match /migrations/{migrationId} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // === Helper Functions ===
  function isUserInCompany(userId, companyId) {
    return exists(/databases/$(database)/documents/userCompany/$(userId)) &&
           get(/databases/$(database)/documents/userCompany/$(userId)).data.companyId == companyId;
  }

                    function hasRoleInCompany(userId, companyId, requiredRoles) {
                    return isUserInCompany(userId, companyId) &&
                           exists(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)) &&
                           hasAnyRole(get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.roles, requiredRoles);
                  }

                  function hasRoleInCompanySimple(userId, companyId, requiredRoles) {
                    // Simplified function that only checks if user has required role in company
                    // This works for all operations including deletion
                    return exists(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)) &&
                           hasAnyRole(get(/databases/$(database)/documents/companies/$(companyId)/users/$(userId)).data.roles, requiredRoles);
                  }

  function hasAnyRole(userRoles, requiredRoles) {
    return userRoles.hasAny(requiredRoles);
  }

    function isAssigningSuperAdminRole(userId, companyId) {
      // Check if the current user is trying to assign super_admin role
      // Only allow if the current user is already a super_admin
      return request.resource.data.roles.hasAny(['super_admin']) &&
             !hasRoleInCompany(userId, companyId, ['super_admin']);
    }
    
    // ===== SUPER ADMIN FULL ACCESS (TEMPORARY) =====
    // This rule MUST be at the end to override all other rules
    match /{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == 'KxJqwhobV5T8RBZhXKaHYHlLxaA3';
    }
  }
} 