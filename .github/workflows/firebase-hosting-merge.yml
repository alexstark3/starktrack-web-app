name: Deploy to Firebase Hosting on merge # Name of your workflow

on:
  push:
    branches:
      - main # This workflow triggers when code is pushed to the 'main' branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest # Specifies the operating system for the runner

    permissions: # Permissions required by the workflow
      contents: read   # To read the repository's code
      id-token: write  # For OIDC authentication with Firebase (crucial!)

    steps:
      # Step 1: Check out your repository code from GitHub
      - uses: actions/checkout@v4

      # Step 2: Set up the Flutter SDK environment
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5' # IMPORTANT: Ensure this matches your local Flutter version
          channel: 'stable'       # Assumes you are using the stable channel
          cache: true             # Caches Flutter dependencies for faster builds

      # Step 3: Run the Flutter web build command
      # This compiles your Dart code into web-ready HTML, CSS, and JavaScript files
      - name: Build Flutter Web App
        run: flutter build web --release # Builds the web app in release mode for optimization

      # Step 3b: Build the Super Admin Flutter Web App (for admin hosting)
      - name: Build Super Admin Flutter Web App
        run: flutter build web --release --target=lib/super_admin/main.dart --output-dir build/admin

      # Step 4: Deploy the built web app to Firebase Hosting
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }} # Provided by GitHub for repository access
          firebaseServiceAccount: ${{ secrets.FIREBASE_SA }} # Your Firebase service account secret
          channelId: live                                                    # Deploys to your live hosting channel
          projectId: starktracklog                                           # Your Firebase project ID
